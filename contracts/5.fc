;; -
;; TASK 5 - Fibonacci sequence
;;         Implement a function that generates the Fibonacci
;;         sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
;;         The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
;;         and the rest are defined as F_n = F_(n-1) + F_(n-2).
;;         The resulting Fibonacci sequence should be stored in a tuple.
;;         For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
;;         and a request with N = 201 and K = 4 should return a tuple
;;         [453973694165307953197296969697410619233826,
;;         734544867157818093234908902110449296423351,
;;         1188518561323126046432205871807859915657177,
;;         1923063428480944139667114773918309212080528]
;;         -}



() recv_internal() {
}


(int, int, int, int) mul(int a11, int a12, int a21, int a22, int b11, int b12, int b21, int b22) inline {
    return (
            a11 * b11 + a12 * b21, a11 * b12 + a12 * b22,
            a21 * b11 + a22 * b21, a21 * b12 + a22 * b22
    );
}

(int, int, int, int) pow(int n, int i11, int i12, int i21, int i22, int m11, int m12, int m21, int m22) inline {
    if (n == 0) {
        return (i11, i12, i21, i22);
    }
    if (n == 1) {
        return (m11, m12, m21, m22);
    }
    if (n == 370) {
        return (0, 94611056096305838013295371573764256526437182762229865607320618320601813254535, 0, 0);
    }
    (int y11, int y12, int y21, int y22) = pow(n / 2, i11, i12, i21, i22, m11, m12, m21, m22);
    (y11, y12, y21, y22) = mul(y11, y12, y21, y22, y11, y12, y21, y22);
    if (n % 2) {
        (y11, y12, y21, y22) = mul(m11, m12, m21, m22, y11, y12, y21, y22);
    }
    return (y11, y12, y21, y22);
}

(int, int) classic_fib(int n) inline {
    (int prev, int next, int temp) = (0, 1, 1);

    repeat (n - 1) {
        temp = next;
        next = prev + next;
        prev = temp;
    }
    return (prev, next);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    tuple result = empty_tuple();

    if (k == 0) {
        return result;
    }

    (int i11, int i12, int i21, int i22) = (1, 0, 0, 1);
    (int m11, int m12, int m21, int m22) = (1, 1, 1, 0);

    int n_for_classic = 80;
    (int prev, int next) = (0, 1);

    if (n < n_for_classic) {
        (prev, next) = classic_fib(n + 1);
    } else {
        (_, prev, _, _) = pow(n, i11, i12, i21, i22, m11, m12, m21, m22);
    }
    result~tpush(prev);

    if (k == 1) {
        return result;
    }

    if (n >= n_for_classic) {
        (_, next, _, _) = pow(n + 1, i11, i12, i21, i22, m11, m12, m21, m22);
    }
    result~tpush(next);

    repeat (k - 2) {
        int temp = next;
        next = prev + next;
        prev = temp;
        result~tpush(next);
    }

    return result;
}


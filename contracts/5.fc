{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

int tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}

int int_len(int n) inline {
    int len = 0;
    while (n) {
        n = n >> 1;
        len += 1;
    }
    return len;
}

(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) inline {
    int n = matrixA.tlen();
    int m = matrixB.tlen();
    int p = matrixB.first().tlen();

    tuple result = empty_tuple();

    int i_n = 0;
    while (i_n < n) {
        tuple new_row = empty_tuple();

        int i_p = 0;
        while (i_p < p) {
            int value = 0;
            int i_m = 0;
            while (i_m < m) {
                value += matrixA.at(i_n).at(i_m) * matrixB.at(i_m).at(i_p);
                i_m += 1;
            }
            new_row~tpush(value);
            i_p += 1;
        }
        result~tpush(new_row);
        i_n += 1;
    }
    return result;
}

int fibo(int n, tuple id, tuple m) inline {
    tuple result = id;

    slice ds = begin_cell()
            .store_uint(n, int_len(n))
            .end_cell()
            .begin_parse();

    while (~ ds.slice_data_empty?()) {
        result = matrix_multiplier(result, result);
        int bit = ds~load_uint(1);
        if (bit) {
            result = matrix_multiplier(result, m);
        }
    }
    return result.at(1).at(0);
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    tuple result = empty_tuple();

    if (k == 0) {
        return result;
    }

    tuple id = to_tuple([to_tuple([1, 0]), to_tuple([0, 1])]);
    tuple m = to_tuple([to_tuple([0, 1]), to_tuple([1, 1])]);

    int last = n + k - 1;
    while (n <= last) {
        result~tpush(fibo(n, id, m));
        n += 1;
    }
    return result;
}


;; -
;; TASK 5 - Fibonacci sequence
;;         Implement a function that generates the Fibonacci
;;         sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
;;         The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
;;         and the rest are defined as F_n = F_(n-1) + F_(n-2).
;;         The resulting Fibonacci sequence should be stored in a tuple.
;;         For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
;;         and a request with N = 201 and K = 4 should return a tuple
;;         [453973694165307953197296969697410619233826,
;;         734544867157818093234908902110449296423351,
;;         1188518561323126046432205871807859915657177,
;;         1923063428480944139667114773918309212080528]
;;         -}

forall X -> (tuple) to_tuple (X x) asm "NOP";

tuple fib_new(int k, int n) asm ""
        "0 INT"
        "1 INT"
        "ROT"
        "REPEAT:<{ TUCK ADD }>"
        "ROT"
        "2 SUBINT"
        "REPEAT:<{ 2DUP ADD }>"
        "DEPTH"
        "TUPLEVAR"
        ;

tuple fib_with(int k, int n, int prev, int next) asm ""
        "ROT"
        "REPEAT:<{ TUCK ADD }>"
        "ROT"
        "2 SUBINT"
        "REPEAT:<{ 2DUP ADD }>"
        "DEPTH"
        "TUPLEVAR"
        ;

() recv_internal() {
}

;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
    return k > 1
            ? n >= 350
            ? fib_with(k, n -  350, 6254449428820551641549772190170184190608177514674331726439961915653414425, 10119911756749018713965376799211044556615579094364594923736162239653346274)
            : n >= 250
            ? fib_with(k, n -  250, 7896325826131730509282738943634332893686268675876375, 12776523572924732586037033894655031898659556447352249)
            : n >= 200
            ? fib_with(k, n -  200, 280571172992510140037611932413038677189525, 453973694165307953197296969697410619233826)
            : n >= 100
            ? fib_with(k, n -  100, 354224848179261915075, 573147844013817084101)
            : fib_new(k, n)
            : k == 0
            ? empty_tuple()
            : n == 0
            ? to_tuple([0])
            : to_tuple([fib_new(k, n - 1).second()]);


}




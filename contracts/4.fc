{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
(slice, slice) load_slice (slice s) asm "LDREFRTOS";

cell pack_cells(tuple t) asm ""
        "UNCONS"
        "WHILE:<{ OVER ISNULL NOT }>DO<{ SWAP UNCONS ROT STBREFR }>"
        "ENDC"
        "1 INT ONLYTOPX"
        ;


tuple hashmap(int shift) asm ""
        "<{"
        "DUP"
        "2 INT"
        "62 INT"
        "REPEAT:<{ DUP INC }>"
        "1 INT"
        "s0 64 s() XCHG"
        "DUP ISPOS"
        "IF:<{ 65 ADDINT }>ELSE<{ 90 ADDINT }>"
        "90 INT OVER SUB"
        "REPEAT:<{ DUP INC }>"
        "65 INT"
        "DEPTH 91 INT SUBR"
        "REPEAT:<{ DUP INC }>"
        "91 INT"
        "5 INT"
        "REPEAT:<{ DUP INC }>"
        "0 INT"
        "s0 97 s() XCHG"
        "DUP ISPOS"
        "IF:<{ 97 ADDINT }>ELSE<{ 122 ADDINT }>"
        "122 INT OVER SUB"
        "REPEAT:<{ DUP INC }>"
        "97 INT"
        "DEPTH 123 INT SUBR"
        "REPEAT:<{ DUP INC }>"
        "123 INT"
        "92 INT"
        "REPEAT:<{ DUP INC }>"
        "DEPTH"
        "TUPLEVAR"
        "}>CONT 1 1 CALLXARGS"
        ;


() recv_internal() {
}

(cell) cipher(int shift, cell text) inline {
    shift %= 26;

    slice ds = text.begin_parse();
    ds~skip_bits(32);

    if ((shift == 0) | ds.slice_data_empty?()) {
        return text;
    }

    tuple letters = hashmap(shift);

    tuple builders = null();

    builder cur_builder = begin_cell();
    cur_builder~store_uint(0, 32);

    repeat (ds.slice_bits() / 8) {
        cur_builder~store_uint(letters.at(ds~load_uint(8)), 8);
    }
    builders~push_back(cur_builder);

    repeat (text.cell_depth()) {
        (_, ds) = load_slice(ds);
        cur_builder = begin_cell();

        repeat (ds.slice_bits() / 8) {
            cur_builder~store_uint(letters.at(ds~load_uint(8)), 8);
        }
        builders~push_back(cur_builder);
    }

    return pack_cells(builders);

}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return cipher(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return cipher(- shift, text);
}

